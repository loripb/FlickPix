{"ast":null,"code":"var _jsxFileName = \"/home/lei/Dev/FlickPix/flickpix-frontend/src/App.js\";\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport FormContainer from './components/FormContainer';\nimport { withRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      backendMovies: [],\n      movies: [],\n      user: {\n        id: 0,\n        username: \"\",\n        user_queues: []\n      },\n      token: \"\",\n      // will use setState to trigger a re-render\n      render: false\n    };\n\n    this.handleResponse = response => {\n      if (response.user) {\n        localStorage.token = response.token;\n        this.setState({\n          user: response.user,\n          token: response.token\n        }, () => {\n          this.props.history.push(\"/\");\n        });\n      } else {\n        alert(response.error);\n      }\n    };\n\n    this.handleLoginSubmit = userInfo => {\n      fetch(\"http://localhost:4000/login\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(userInfo)\n      }).then(r => r.json()).then(this.handleResponse);\n    };\n\n    this.handleRegisterSubmit = userInfo => {\n      fetch(\"http://localhost:4000/users\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userInfo.username,\n          password: userInfo.password\n        })\n      }).then(r => r.json()).then(this.handleResponse);\n    };\n\n    this.renderForm = routerProps => {\n      if (routerProps.location.pathname === \"/login\") {\n        return /*#__PURE__*/React.createElement(FormContainer, {\n          formName: \"Login Form\",\n          handleSubmit: this.handleLoginSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 14\n          }\n        });\n      } else if (routerProps.location.pathname === \"/register\") {\n        return /*#__PURE__*/React.createElement(FormContainer, {\n          formName: \"Register Form\",\n          handleSubmit: this.handleRegisterSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.addMovieToQueue = movieObj => {\n      fetch(\"http://localhost:4000/user_queues\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          movie_id: movieObj.id,\n          user_id: this.state.user.id\n        })\n      }).then(r => r.json()).then(newMovieForQueue => {\n        this.setState({\n          user: { ...this.state.user,\n            user_queues: [...this.state.user.user_queues, newMovieForQueue]\n          },\n          backendMovies: [...this.state.backendMovies, movieObj]\n        });\n      });\n    };\n\n    this.updateQueue = queueObj => {\n      fetch(`http://localhost:4000/user_queues/${queueObj.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accept\": \"application/json\"\n        },\n        body: JSON.stringify({ ...queueObj,\n          watched: !queueObj.watched\n        })\n      }).then(r => r.json()).then(queue_res => {\n        let theUpdatedArray = this.state.user.user_queues.map(queue => {\n          if (queue.id === queueObj.id) {\n            return { ...queue,\n              watched: !queue.watched\n            };\n          } else {\n            return queue;\n          }\n        });\n        this.setState({\n          user: { ...this.state.user,\n            user_queues: theUpdatedArray\n          }\n        });\n      });\n    };\n\n    this.deleteFromQueue = queueObj => {\n      let filteredQueue = this.state.user.user_queues.filter(queue => queue.id !== queueObj.id);\n      this.setState({\n        user: { ...this.state.user,\n          user_queues: filteredQueue\n        }\n      });\n      fetch(`http://localhost:4000/user_queues/${queueObj.id}`, {\n        method: \"DELETE\"\n      });\n    };\n\n    this.shuffle = () => {\n      fetch(\"http://localhost:4000/api\").then(r => r.json()).then(data => this.setState({\n        movies: data.results\n      }));\n    };\n\n    this.handleReRender = () => {\n      console.log(\"RERENDER\");\n      this.setState({\n        render: true\n      });\n      this.state.user;\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.token) {\n      fetch(\"http://localhost:4000/persist\", {\n        headers: {\n          \"Authorization\": `bearer ${localStorage.token}`\n        }\n      }).then(r => r.json()).then(this.handleResponse);\n    }\n\n    fetch(\"http://localhost:4000/api\").then(r => r.json()).then(data => this.setState({\n      movies: data.results\n    }));\n    fetch(\"http://localhost:4000/movies\").then(r => r.json()).then(data => {\n      this.setState({\n        backendMovies: data\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      render: this.renderForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/register\",\n      render: this.renderForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      render: () => /*#__PURE__*/React.createElement(Home, {\n        userName: this.state.user.username,\n        movies: this.state.movies,\n        backendMovies: this.state.backendMovies,\n        addMovieToQueue: this.addMovieToQueue,\n        updateQueue: this.updateQueue,\n        userObj: this.state.user,\n        updateQueue: this.updateQueue,\n        deleteFromQueue: this.deleteFromQueue,\n        logout: this.logout,\n        shuffle: this.shuffle,\n        handleReRender: this.handleReRender,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      render: () => /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 33\n        }\n      }, \"Page not Found\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/home/lei/Dev/FlickPix/flickpix-frontend/src/App.js"],"names":["React","Switch","Route","Home","FormContainer","withRouter","App","Component","state","backendMovies","movies","user","id","username","user_queues","token","render","handleResponse","response","localStorage","setState","props","history","push","alert","error","handleLoginSubmit","userInfo","fetch","method","headers","body","JSON","stringify","then","r","json","handleRegisterSubmit","password","renderForm","routerProps","location","pathname","addMovieToQueue","movieObj","movie_id","user_id","newMovieForQueue","updateQueue","queueObj","watched","queue_res","theUpdatedArray","map","queue","deleteFromQueue","filteredQueue","filter","shuffle","data","results","handleReRender","console","log","componentDidMount","logout"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport FormContainer from './components/FormContainer';\n\nimport { withRouter } from 'react-router-dom'\n\nclass App extends React.Component {\n  state = {\n    backendMovies: [],\n    movies: [],\n    user: {\n      id: 0,\n      username: \"\",\n      user_queues: []\n    },\n    token: \"\",\n    // will use setState to trigger a re-render\n    render: false\n  }\n\n  componentDidMount() {\n    if (localStorage.token) {\n      fetch(\"http://localhost:4000/persist\", {\n        headers: {\n          \"Authorization\": `bearer ${localStorage.token}`\n        }\n      })\n      .then(r => r.json())\n      .then(this.handleResponse)\n    }\n\n    fetch(\"http://localhost:4000/api\")\n    .then(r => r.json())\n    .then(data => this.setState({\n      movies: data.results\n    }))\n\n    fetch(\"http://localhost:4000/movies\")\n    .then(r => r.json())\n    .then(data => {\n      this.setState({\n        backendMovies: data\n      })\n    })\n  }\n\n  handleResponse = (response) => {\n    if (response.user) {\n      localStorage.token = response.token\n      this.setState({\n        user: response.user,\n        token: response.token\n      }, () => {\n        this.props.history.push(\"/\")\n    })\n    } else {\n      alert(response.error)\n    }\n  }\n\n  handleLoginSubmit = (userInfo) => {\n\n    fetch(\"http://localhost:4000/login\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(userInfo)\n    })\n    .then(r => r.json())\n    .then(this.handleResponse)\n  }\n\n  handleRegisterSubmit = (userInfo) => {\n    fetch(\"http://localhost:4000/users\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: userInfo.username,\n        password: userInfo.password\n      })\n    })\n    .then(r => r.json())\n    .then(this.handleResponse)\n  }\n\n  renderForm = (routerProps) => {\n    if(routerProps.location.pathname === \"/login\"){\n      return <FormContainer formName=\"Login Form\" handleSubmit={this.handleLoginSubmit}/>\n    } else if (routerProps.location.pathname === \"/register\") {\n      return <FormContainer formName=\"Register Form\" handleSubmit={this.handleRegisterSubmit}/>\n    }\n  }\n\n  addMovieToQueue = (movieObj) => {\n    fetch(\"http://localhost:4000/user_queues\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        movie_id: movieObj.id,\n        user_id: this.state.user.id\n      })\n    })\n    .then(r => r.json())\n    .then(newMovieForQueue => {\n      this.setState({\n      user: {\n        ...this.state.user,\n        user_queues: [...this.state.user.user_queues, newMovieForQueue]\n      },\n      backendMovies: [...this.state.backendMovies, movieObj]\n    })\n    })\n  }\n\n  updateQueue = (queueObj) => {\n    fetch(`http://localhost:4000/user_queues/${queueObj.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...queueObj,\n        watched: !queueObj.watched\n      })\n    })\n    .then(r => r.json())\n    .then(queue_res => {\n      let theUpdatedArray = this.state.user.user_queues.map((queue) => {\n        if (queue.id === queueObj.id) {\n          return {\n            ...queue,\n            watched: !queue.watched\n          }\n        } else {\n          return queue\n        }\n      })\n\n      this.setState({\n        user: {\n          ...this.state.user,\n          user_queues: theUpdatedArray\n        }\n      })\n    })\n\n  }\n\n  deleteFromQueue = (queueObj) => {\n    let filteredQueue = this.state.user.user_queues.filter(queue => queue.id !== queueObj.id)\n    this.setState({\n      user: {\n        ...this.state.user,\n        user_queues: filteredQueue\n      }\n    })\n    fetch(`http://localhost:4000/user_queues/${queueObj.id}`, {\n      method: \"DELETE\"\n    })\n\n  }\n\n  shuffle = () => {\n    fetch(\"http://localhost:4000/api\")\n    .then(r => r.json())\n    .then(data => this.setState({\n      movies: data.results\n    }))\n  }\n\n  handleReRender = () => {\n    console.log(\"RERENDER\");\n    this.setState({\n      render: true\n    })\n    this.state.user\n  }\n\n  render() {\n    return (\n      <Switch>\n          <Route path=\"/login\" render={ this.renderForm } />\n          <Route path=\"/register\" render={ this.renderForm } />\n          <Route path=\"/\" exact render={() =>\n              <Home\n                userName={ this.state.user.username }\n                movies={ this.state.movies }\n                backendMovies={ this.state.backendMovies }\n                addMovieToQueue={ this.addMovieToQueue }\n                updateQueue={ this.updateQueue }\n                userObj={ this.state.user }\n                updateQueue={ this.updateQueue }\n                deleteFromQueue={ this.deleteFromQueue }\n                logout={ this.logout }\n                shuffle={  this.shuffle }\n                handleReRender={ this.handleReRender }\n              />\n            } />\n          <Route render={ () => <p>Page not Found</p> } />\n      </Switch>\n    )\n  }\n}\n\nexport default withRouter(App)\n"]},"metadata":{},"sourceType":"module"}